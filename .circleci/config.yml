version: 2.1

executors:
  buildpack:
    docker:
      - image: circleci/buildpack-deps:trusty
    working_directory: ~/src

commands:
  snapshot:
    description: Deploy contracts to Geth via docker-compose with parametrized MIN_EXIT_PERIOD and expose addresses and snapshot URL
    parameters:
      min_exit_period:
        type: integer
        description: "The value used for plasma contracts deployment"
    steps:
      - run: cat tester/CONTRACT_SHA
      - run:
          name: Get Plasma Deployer image and standup geth and deploy contracts
          command: |
            set -xe
            IMAGE_NAME=elixir-omg-tester-plasma-deployer
            if [ "$CIRCLE_BRANCH" = "master" ]; then
              IMAGE_DATE="$(date -u +%Y%m%d)"
              TAG="$IMAGE_NAME:stable-$IMAGE_DATE"
            else
              IMAGE_GIT=$(git rev-parse --short HEAD)
              TAG="$IMAGE_NAME:dev-$IMAGE_GIT"
            fi
            cd contracts/
            MIN_EXIT_PERIOD=<< parameters.min_exit_period >> IMAGE=${TAG} docker-compose up -d
            ### in the mean time, install gcloud requirements
            wget https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-272.0.0-linux-x86_64.tar.gz -O gcloud-sdk.tar.gz
            tar zxf gcloud-sdk.tar.gz google-cloud-sdk
            mv google-cloud-sdk ~/.google-cloud-sdk
            ~/.google-cloud-sdk/install.sh --quiet
            echo $GCLOUD_SERVICE_KEY | gcloud auth activate-service-account --key-file=-
            gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
            gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
            ### done installing gcloud requirements
            sleep 4m
            # wait until we're UP
            while true; do 
              if [ "$(curl localhost:8000/contracts)" ]; then 
                break
              fi; 
            done
            # stop geth in docker so that we can snapshot
            docker exec -it $(docker ps -aqf "name=geth") /bin/sh -c "pkill -INT geth"
            # ipc is not for cp
            sudo rm -f data/geth.ipc
            TAR_NAME=$(echo data-${TAG}-MIN_EXIT_PERIOD-<< parameters.min_exit_period >>.tar.gz | sed 's/:/-/')
            echo ${TAR_NAME}
            sudo tar czf ${TAR_NAME} data/
            export BOTO_CONFIG=/dev/null
            gsutil cp ${TAR_NAME} gs://circleci-docker-artifacts 
            echo "https://storage.googleapis.com/circleci-docker-artifacts/${TAR_NAME}"
            PLASMA_CONTRACTS=$(curl localhost:8000/contracts)
            DATA=$(echo "Contracts snapshotted with MIN_EXIT_PERIOD: << parameters.min_exit_period >>. Snapshot located at: https://storage.googleapis.com/circleci-docker-artifacts/${TAR_NAME}. Contract addresses: ${PLASMA_CONTRACTS} " | jq -Rs '.')
            if [ "$CIRCLE_BRANCH" = "master" ]; then
              # publish a release
              curl -H "Authorization: token ${GITHUB_TOKEN}" -X POST -d "{\"tag_name\": \"v1.0.0\",\"body\": ${DATA} }" "https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/releases"
            else
              curl -H "Authorization: token ${GITHUB_TOKEN}" -X POST -d "{\"body\": ${DATA} }" "https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/issues/${CIRCLE_PULL_REQUEST##*/}/comments"
            fi
            ls data/geth
            docker-compose down && sudo rm -rf data/geth/chaindata data/geth/LOCK data/geth/lightchaindata data/geth/nodekey data/geth/nodes data/geth/transactions.rlp

  docker_import:
    description: "Load Docker acrhive from the given directory"
    parameters:
      path:
        type: string
        description: "Path to directory containing Docker archive to import"
    steps:
      - run:
          name: Import Docker images from archive
          command: |
            set -xe
            IMPORT_PATH="<<parameters.path>>"
            IMPORT_PATH=${IMPORT_PATH/\~/$HOME}

            mkdir -p "$(dirname "$IMPORT_PATH")"
            for file in "$IMPORT_PATH"/*.tar; do
              if [ -f "$file" ]; then
                printf "\033[0;33mImporting %s to Docker...\033[0;0m\\n" "$file"
                docker load -i "$file"
              fi
            done

  docker_build:
    description: "Build Dockerfile with the given parameters"
    parameters:
      image:
        type: string
        description: "Image name to build"
      dockerfile:
        type: string
        description: "Path to Dockerfile"
        default: "Dockerfile"
      import:
        type: string
        description: "Path to directory containing Docker archive to import"
        default: "~/docker"
      export:
        type: string
        description: "Path to export Docker image after running build"
        default: ""
      persist_path:
        type: string
        description: "Path to persist Docker archive"
        default: "~/docker"
    steps:
      - when:
          condition: <<parameters.import>>
          steps:
            - docker_import:
                path: <<parameters.import>>
      - run:
          name: Build Docker image
          command: |
            set -xe
            DOCKERFILE="<<parameters.dockerfile>>"
            DOCKERFILE=${DOCKERFILE/\~/$HOME}

            BASENAME="$(basename "$DOCKERFILE")"
            DIRNAME="$(dirname "$DOCKERFILE")"

            cd "$DIRNAME" || exit 1
            docker build . --cache-from "<<parameters.image>>" -t "<<parameters.image>>" -f "$BASENAME"
      - when:
          condition: <<parameters.export>>
          steps:
            - run:
                name: Export Docker image to archive
                command: |
                  set -xe
                  EXPORT_PATH="<<parameters.export>>"
                  EXPORT_PATH=${EXPORT_PATH/\~/$HOME}

                  mkdir -p $(dirname "$EXPORT_PATH")
                  docker save -o "$EXPORT_PATH" "<<parameters.image>>"

  docker_push:
    description: "Publish image to Docker Hub"
    parameters:
      image:
        type: string
        description: "Image name to push"
    steps:
      - run:
          name: Log in to Docker Hub
          command: |
            echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
      - run:
          name: Publish Docker Image
          command: |
            set -xe
            IMAGE_NAME="<<parameters.image>>"
            if [ "$CIRCLE_BRANCH" = "master" ]; then
              IMAGE_DATE="$(date -u +%Y%m%d)"
              docker tag "$IMAGE_NAME" "$IMAGE_NAME:stable"
              docker tag "$IMAGE_NAME" "$IMAGE_NAME:stable-$IMAGE_DATE"
              docker push "$IMAGE_NAME:stable"
              docker push "$IMAGE_NAME:stable-$IMAGE_DATE"
            else
              IMAGE_GIT=$(git rev-parse --short HEAD)
              docker tag "$IMAGE_NAME" "$IMAGE_NAME:dev"
              docker tag "$IMAGE_NAME" "$IMAGE_NAME:dev-$IMAGE_GIT"
              docker push "$IMAGE_NAME:dev"
              docker push "$IMAGE_NAME:dev-$IMAGE_GIT"
            fi

jobs:
  setup:
    executor: buildpack
    steps:
      - checkout
      - attach_workspace: &attach_workspace
          at: ~/
      - run:
          description: Compute Dockerfile hashes
          command: |
            set -xe
            cat */Dockerfile* |openssl dgst -sha256 |awk '{ print $2 }' > "docker-elixir-omg-hash"
      - restore_cache:
          keys:
            - v1-docker-elixir-omg-{{ checksum "docker-elixir-omg-hash" }}
            - v1-docker-elixir-omg-
      - persist_to_workspace: &persist_workspace
          name: Persist workspace
          root: ~/
          paths:
            - docker
            - src

  build_builder_erlang:
    executor: buildpack
    steps:
      - setup_remote_docker
      - attach_workspace: *attach_workspace
      - docker_build:
          image: "omisegoimages/elixir-omg-builder-erlang"
          dockerfile: "builder/Dockerfile.erlang"
          export: "~/docker/omisegoimages_elixir-omg_builder_erlang.tar"
      - persist_to_workspace:
          <<: *persist_workspace
          paths:
            - docker/omisegoimages_elixir-omg_builder_erlang.tar

  build_builder_elixir:
    executor: buildpack
    steps:
      - setup_remote_docker
      - attach_workspace: *attach_workspace
      - docker_build:
          image: "omisegoimages/elixir-omg-builder-elixir"
          dockerfile: "builder/Dockerfile.elixir"
          export: "~/docker/omisegoimages_elixir-omg_builder_elixir.tar"
      - persist_to_workspace:
          <<: *persist_workspace
          paths:
            - docker/omisegoimages_elixir-omg_builder_elixir.tar

  build_builder_rocksdb:
    executor: buildpack
    steps:
      - setup_remote_docker
      - attach_workspace: *attach_workspace
      - docker_build:
          image: "omisegoimages/elixir-omg-builder-rocksdb"
          dockerfile: "builder/Dockerfile.rocksdb"
          export: "~/docker/omisegoimages_elixir-omg_builder_rocksdb.tar"
      - persist_to_workspace:
          <<: *persist_workspace
          paths:
            - docker/omisegoimages_elixir-omg_builder_rocksdb.tar

  build_builder:
    executor: buildpack
    steps:
      - setup_remote_docker
      - attach_workspace: *attach_workspace
      - docker_build:
          image: "omisegoimages/elixir-omg-builder"
          dockerfile: "builder/Dockerfile"
          export: "~/docker/omisegoimages_elixir-omg_builder.tar"
      - persist_to_workspace:
          <<: *persist_workspace
          paths:
            - docker/omisegoimages_elixir-omg_builder.tar

  build_tester_geth:
    executor: buildpack
    steps:
      - setup_remote_docker
      - attach_workspace: *attach_workspace
      - docker_build:
          image: "omisegoimages/elixir-omg-tester-geth"
          dockerfile: "tester/Dockerfile.geth"
          export: "~/docker/omisegoimages_elixir-omg_tester_geth.tar"
      - persist_to_workspace:
          <<: *persist_workspace
          paths:
            - docker/omisegoimages_elixir-omg_tester_geth.tar

  build_tester_plasma_deployer:
    executor: buildpack
    steps:
      - setup_remote_docker
      - attach_workspace: *attach_workspace
      - docker_build:
          image: "omisegoimages/elixir-omg-tester-plasma-deployer"
          dockerfile: "tester/Dockerfile.plasma_deployer"
          export: "~/docker/omisegoimages_elixir-omg_tester_plasma_deployer.tar"
      - persist_to_workspace:
          <<: *persist_workspace
          paths:
            - docker/omisegoimages_elixir-omg_tester_plasma_deployer.tar

  build_tester:
    executor: buildpack
    steps:
      - setup_remote_docker
      - attach_workspace: *attach_workspace
      - docker_build:
          image: "omisegoimages/elixir-omg-tester"
          dockerfile: "tester/Dockerfile"
          export: "~/docker/omisegoimages_elixir-omg_tester.tar"
      - persist_to_workspace:
          <<: *persist_workspace
          paths:
            - docker/omisegoimages_elixir-omg_tester.tar

  publish_builder:
    executor: buildpack
    steps:
      - setup_remote_docker
      - attach_workspace: *attach_workspace
      - docker_import:
          path: "~/docker"
      - docker_push:
          image: "omisegoimages/elixir-omg-builder"

  publish_tester:
    executor: buildpack
    steps:
      - setup_remote_docker
      - attach_workspace: *attach_workspace
      - docker_import:
          path: "~/docker"
      - docker_push:
          image: "omisegoimages/elixir-omg-tester"

  publish_plasma_deployer:
    executor: buildpack
    steps:
      - setup_remote_docker
      - attach_workspace: *attach_workspace
      - docker_import:
          path: "~/docker"
      - docker_push:
          image: "omisegoimages/elixir-omg-tester-plasma-deployer"

  build_deploy:
    executor: buildpack
    steps:
      - setup_remote_docker
      - attach_workspace: *attach_workspace
      - docker_build:
          image: "omisegoimages/elixir-omg-deploy"
          dockerfile: "deploy/Dockerfile"
          export: "~/docker/omisegoimages_elixir-omg_deploy.tar"
      - persist_to_workspace:
          <<: *persist_workspace
          paths:
            - docker/omisegoimages_elixir-omg_deploy.tar

  publish_deploy:
    executor: buildpack
    steps:
      - setup_remote_docker
      - attach_workspace: *attach_workspace
      - docker_import:
          path: "~/docker"
      - docker_push:
          image: "omisegoimages/elixir-omg-deploy"

  save_cache:
    executor: buildpack
    steps:
      - attach_workspace: *attach_workspace
      - save_cache:
          name: Cache builder image artifacts
          key: v1-docker-elixir-omg-{{ checksum "docker-elixir-omg-hash" }}
          paths:
            - ~/docker

  snapshot_plasma_contracts:
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - checkout
      - attach_workspace: *attach_workspace
      - snapshot:
          min_exit_period: 20
      - snapshot:
          min_exit_period: 120
    

workflows:
  version: 2
  build:
    jobs:
      - setup

      - build_builder_erlang:
          requires:
            - setup
      - build_builder_elixir:
          requires:
            - build_builder_erlang
      - build_builder_rocksdb:
          requires:
            - setup
      - build_builder:
          requires:
            - build_builder_rocksdb
            - build_builder_elixir
      - publish_builder:
          requires:
            - build_builder

      - build_tester_geth:
          requires:
            - setup
      - build_tester_plasma_deployer:
          requires:
            - setup
      - build_tester:
          requires:
            - build_builder_rocksdb
            - build_builder_elixir
            - build_tester_geth
      - publish_tester:
          requires:
            - build_tester

      - publish_plasma_deployer:
          requires:
            - build_tester_plasma_deployer
      
      - snapshot_plasma_contracts:
          requires:
            - publish_plasma_deployer

      - build_deploy:
          requires:
            - setup
      - publish_deploy:
          requires:
            - build_deploy

      - save_cache:
          requires:
            - publish_builder
            - publish_deploy
