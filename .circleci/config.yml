version: 2.1

executors:
  buildpack:
    docker:
      - image: circleci/buildpack-deps:trusty
    working_directory: ~/src

commands:
  snapshot:
    description: Deploy contracts to Geth via docker-compose with parametrized MIN_EXIT_PERIOD and expose addresses and snapshot URL
    parameters:
      min_exit_period:
        type: integer
        description: "The value used for plasma contracts deployment"
      docker_compose_command:
        type: string
        description: "Which docker compose files should we use?"
      vault:
        type: string
        default: "false"
        description: "True/false"
    steps:
      - run:
          name: Get Plasma Deployer image and standup geth and deploy contracts
          working_directory: ~/project/contracts
          command: |
            IMAGE_NAME=elixir-omg-tester-plasma-deployer
            if [ "$CIRCLE_BRANCH" = "master" ]; then
              IMAGE_DATE="$(date -u +%Y%m%d)"
              TAG="$IMAGE_NAME:stable-$IMAGE_DATE"
            else
              IMAGE_GIT=$(git rev-parse --short HEAD)
              TAG="$IMAGE_NAME:dev-$IMAGE_GIT"
            fi
            echo 'export TAG='${TAG} >> $BASH_ENV
            # this docker compose up needs to be above the gcloud login because the credentials are different!
            MIN_EXIT_PERIOD=<< parameters.min_exit_period >> IMAGE=${TAG} << parameters.docker_compose_command >>
            echo $GCLOUD_SERVICE_KEY | gcloud auth activate-service-account --key-file=-
            gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
            gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
      - run:
          name: Docker logs
          working_directory: ~/project/contracts
          background: true
          command: |
            docker-compose logs -f
      - run:
          name: Wait for contracts
          command: |
            sleep 5m
            # wait until we're UP
            for i in {1..60}; do
              if [ "$(curl localhost:8000/contracts)" ]; then
                break
              fi;
              sleep 1
            done
      - run:
          name: Extract partial data from the deployment
          working_directory: ~/project/contracts
          command: |
            CONTRACT_SHA=$(cat ../tester/CONTRACT_SHA)
            TAR_NAME=$(echo data-${TAG}-MIN_EXIT_PERIOD-<< parameters.min_exit_period >>-PLASMA_CONTRACTS_SHA-${CONTRACT_SHA}-VAULT-<< parameters.vault >>.tar.gz | sed 's/:/-/')
            echo ${TAR_NAME}
            # for every key in object db.json create a file
            # where the key is the name of the file and the content of the file is it's value
            # for example plasma-contracts/build/authority_address file has content 0xc0f780dfc35075979b0def588d999225b7ecc56f
            KEYS=($(cat plasma-contracts/build/db.json | jq -r '.contracts' | jq 'keys[]' | tr -d '"'))
            for i in "${!KEYS[@]}"; do
              echo $(cat plasma-contracts/build/db.json | jq -r '.contracts' | jq -r '.'${KEYS[i]} | tr -d '"') > plasma-contracts/build/"${KEYS[i]}"
            done
      - run:
          name: Has the deployment succeeded?
          working_directory: ~/project/contracts
          command: |
            # "startStandardExitBondSize()" |> ABI.encode([]) |> ExPlasma.Encoding.to_hex()
            export PEG=$(cat plasma-contracts/build/payment_exit_game)
            response=$(curl -H "Content-Type: application/json" --data '{"jsonrpc":"2.0","method": "eth_call", "params": [{"from": "0xd6858A28aA07A1cd8cA285443e80E2b0A031d50d", "to": "'"$PEG"'", "data": "0xfe32a124"}, "latest"], "id": 8}' http://127.0.0.1:8545)
            echo $response | jq -r '.'
            echo $response | ( ! grep "error" )
            echo $response | ( ! grep "0x0000000000000000000000000000000000000000000000000000000000000000" )
      - run:
          name: Stop nodes
          working_directory: ~/project/contracts
          command: |
            echo "stop geth in docker so that we can snapshot"
            docker exec -it $(docker ps -aqf "name=geth") /bin/sh -c "pkill -INT geth"
            docker stop $(docker ps -aqf "name=vault_server")
            sudo rm -f data/geth.ipc
      - run:
          name: Snapshot
          working_directory: ~/project/contracts
          command: |
            CONTRACT_SHA=$(cat ../tester/CONTRACT_SHA)
            TAR_NAME=$(echo data-${TAG}-MIN_EXIT_PERIOD-<< parameters.min_exit_period >>-PLASMA_CONTRACTS_SHA-${CONTRACT_SHA}-VAULT-<< parameters.vault >>.tar.gz | sed 's/:/-/')
            # at this point we snapshot folders we're interested in
            sudo tar czf ${TAR_NAME} data/geth plasma-contracts/contracts/ plasma-contracts/build/* ../tester/CONTRACT_SHA immutability/config/
            export BOTO_CONFIG=/dev/null
            gsutil cp ${TAR_NAME} gs://circleci-docker-artifacts
            echo "https://storage.googleapis.com/circleci-docker-artifacts/${TAR_NAME}"
            PLASMA_CONTRACTS=$(curl localhost:8000/contracts)
            DATA=$(echo "Contracts snapshotted with MIN_EXIT_PERIOD for SHA ( ${CONTRACT_SHA} ): << parameters.min_exit_period >>. Vault: << parameters.vault >> \r\n Snapshot located at: \r\n   https://storage.googleapis.com/circleci-docker-artifacts/${TAR_NAME}  \r\n  Contract addresses: \r\n ${PLASMA_CONTRACTS} " | jq -Rs '.')
            if [ "$CIRCLE_BRANCH" = "master" ]; then
              # append the data you would usually post as a comment to a file and create a release out of this file
              echo ${DATA} >> /tmp/release
              echo $'\r\n\r\n\r\n' >> /tmp/release
            else
              curl -H "Authorization: token ${GITHUB_TOKEN}" -X POST -d "{\"body\": ${DATA} }" "https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/issues/${CIRCLE_PULL_REQUEST##*/}/comments"
            fi
            ls data/geth
            docker-compose down
            sudo rm -rf data/geth/chaindata data/geth/LOCK data/geth/lightchaindata data/geth/nodekey data/geth/nodes data/geth/transactions.rlp
            sudo rm -rf immutability/config/data
            sudo rm -rf immutability/config/ca.crt immutability/config/ca.key immutability/config/ca.srl immutability/config/my-service.crt  immutability/config/my-service.csr immutability/config/my-service.key immutability/config/openssl.cnf immutability/config/unseal.json

  snapshot_reorg:
    description: Deploy contracts to Geth via docker-compose with parametrized MIN_EXIT_PERIOD and expose addresses and snapshot URL
    parameters:
      min_exit_period:
        type: integer
        description: "The value used for plasma contracts deployment"
    steps:
      - run:
          name: Get Plasma Deployer image and standup geth and deploy contracts
          working_directory: ~/project/contracts_reorg
          command: |
            IMAGE_NAME=elixir-omg-tester-plasma-deployer
            if [ "$CIRCLE_BRANCH" = "master" ]; then
              IMAGE_DATE="$(date -u +%Y%m%d)"
              TAG="$IMAGE_NAME:stable-$IMAGE_DATE"
            else
              IMAGE_GIT=$(git rev-parse --short HEAD)
              TAG="$IMAGE_NAME:dev-$IMAGE_GIT"
            fi
            echo 'export TAG='${TAG} >> $BASH_ENV
            # this docker compose up needs to be above the gcloud login because the credentials are different!
            MIN_EXIT_PERIOD=<< parameters.min_exit_period >> IMAGE=${TAG} docker-compose up -d
            echo $GCLOUD_SERVICE_KEY | gcloud auth activate-service-account --key-file=-
            gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
            gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
      - run: timeout 25m docker-compose logs --follow || true
      - run:
          name: Docker logs
          working_directory: ~/project/contracts_reorg
          background: true
          command: |
            docker-compose logs -f
      - run:
          name: Wait for contracts
          no_output_timeout: 50m
          command: |
            sleep 30m
            # wait until we're UP
            for i in {1..60}; do
              if [ "$(curl localhost:8000/contracts)" ]; then
                break
              fi;
              sleep 10
            done
      - run:
          name: Stop nodes
          working_directory: ~/project/contracts_reorg
          command: |
            echo "stop geth in docker so that we can snapshot"
            docker exec -it $(docker ps -aqf "name=node-1") /bin/sh -c "pkill -INT geth"
            sudo rm -f data/geth.ipc
            sudo rm -f data/geth/nodekey
      - run:
          name: Get Plasma Deployer image and standup geth and deploy contracts
          no_output_timeout: 40m
          working_directory: ~/project/contracts_reorg
          command: |
            TAR_NAME=$(echo data-${TAG}-MIN_EXIT_PERIOD-<< parameters.min_exit_period >>-PLASMA_CONTRACTS_SHA-${CONTRACT_SHA}-reorg.tar.gz | sed 's/:/-/')
            echo ${TAR_NAME}
            # for every key in object db.json create a file
            # where the key is the name of the file and the content of the file is it's value
            # for example plasma-contracts/build/authority_address file has content 0xc0f780dfc35075979b0def588d999225b7ecc56f
            KEYS=($(cat plasma-contracts/build/db.json | jq -r '.contracts' | jq 'keys[]' | tr -d '"'))
            for i in "${!KEYS[@]}"; do
              echo $(cat plasma-contracts/build/db.json | jq -r '.contracts' | jq -r '.'${KEYS[i]} | tr -d '"') > plasma-contracts/build/"${KEYS[i]}"
            done
            sudo tar czf ${TAR_NAME} data/geth ethash/ plasma-contracts/contracts/ plasma-contracts/build/* ../tester/CONTRACT_SHA
            export BOTO_CONFIG=/dev/null
            gsutil cp ${TAR_NAME} gs://circleci-docker-artifacts
            echo "https://storage.googleapis.com/circleci-docker-artifacts/${TAR_NAME}"
            PLASMA_CONTRACTS=$(curl localhost:8000/contracts)
            DATA=$(echo "Contracts snapshotted with MIN_EXIT_PERIOD for SHA ( ${CONTRACT_SHA} ): << parameters.min_exit_period >>. Snapshot located at: https://storage.googleapis.com/circleci-docker-artifacts/${TAR_NAME}  \r\n  Contract addresses: \r\n ${PLASMA_CONTRACTS} " | jq -Rs '.')
            if [ "$CIRCLE_BRANCH" = "master" ]; then
              # append the data you would usually post as a comment to a file and create a release out of this file
              echo ${DATA} >> /tmp/release
              echo $'\r\n\r\n\r\n' >> /tmp/release
            else
              curl -H "Authorization: token ${GITHUB_TOKEN}" -X POST -d "{\"body\": ${DATA} }" "https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/issues/${CIRCLE_PULL_REQUEST##*/}/comments"
            fi
            ls data/geth
            docker-compose down
            sudo rm -rf data/geth/chaindata data/geth/LOCK data/geth/lightchaindata data/geth/nodekey data/geth/nodes data/geth/transactions.rlp
            sudo rm -rf immutability/config/data
            sudo rm -rf immutability/config/ca.crt immutability/config/ca.key immutability/config/ca.srl immutability/config/my-service.crt  immutability/config/my-service.csr immutability/config/my-service.key immutability/config/openssl.cnf immutability/config/unseal.json

  docker_import:
    description: "Load Docker acrhive from the given directory"
    parameters:
      path:
        type: string
        description: "Path to directory containing Docker archive to import"
    steps:
      - run:
          name: Import Docker images from archive
          command: |
            set -xe
            IMPORT_PATH="<<parameters.path>>"
            IMPORT_PATH=${IMPORT_PATH/\~/$HOME}

            mkdir -p "$(dirname "$IMPORT_PATH")"
            for file in "$IMPORT_PATH"/*.tar; do
              if [ -f "$file" ]; then
                printf "\033[0;33mImporting %s to Docker...\033[0;0m\\n" "$file"
                docker load -i "$file"
              fi
            done

  docker_build:
    description: "Build Dockerfile with the given parameters"
    parameters:
      image:
        type: string
        description: "Image name to build"
      dockerfile:
        type: string
        description: "Path to Dockerfile"
        default: "Dockerfile"
      import:
        type: string
        description: "Path to directory containing Docker archive to import"
        default: "~/docker"
      export:
        type: string
        description: "Path to export Docker image after running build"
        default: ""
      persist_path:
        type: string
        description: "Path to persist Docker archive"
        default: "~/docker"
      build-arg:
        type: string
        description: "Args to pass into docker file"
        default: ""
    steps:
      - when:
          condition: <<parameters.import>>
          steps:
            - docker_import:
                path: <<parameters.import>>
      - run:
          name: Build Docker image
          command: |
            set -xe
            DOCKERFILE="<<parameters.dockerfile>>"
            DOCKERFILE=${DOCKERFILE/\~/$HOME}

            BASENAME="$(basename "$DOCKERFILE")"
            DIRNAME="$(dirname "$DOCKERFILE")"

            cd "$DIRNAME" || exit 1
            if [ -z "<<parameters.build-arg>>" ]; then
              docker build . --cache-from "<<parameters.image>>" -t "<<parameters.image>>" -f "$BASENAME"
            else
              docker build . --cache-from "<<parameters.image>>" -t "<<parameters.image>>" -f "$BASENAME" --build-arg <<parameters.build-arg>>
            fi
      - when:
          condition: <<parameters.export>>
          steps:
            - run:
                name: Export Docker image to archive
                command: |
                  set -xe
                  EXPORT_PATH="<<parameters.export>>"
                  EXPORT_PATH=${EXPORT_PATH/\~/$HOME}

                  mkdir -p $(dirname "$EXPORT_PATH")
                  docker save -o "$EXPORT_PATH" "<<parameters.image>>"

  docker_push:
    description: "Publish image to Docker Hub"
    parameters:
      image:
        type: string
        description: "Image name to push"
    steps:
      - run:
          name: Log in to Docker Hub
          command: |
            echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
      - run:
          name: Publish Docker Image
          command: |
            set -xe
            IMAGE_NAME="<<parameters.image>>"
            if [ "$CIRCLE_BRANCH" = "master" ]; then
              IMAGE_DATE="$(date -u +%Y%m%d)"
              docker tag "$IMAGE_NAME" "$IMAGE_NAME:stable"
              docker tag "$IMAGE_NAME" "$IMAGE_NAME:stable-$IMAGE_DATE"
              docker push "$IMAGE_NAME:stable"
              docker push "$IMAGE_NAME:stable-$IMAGE_DATE"
            else
              IMAGE_GIT=$(git rev-parse --short HEAD)
              docker tag "$IMAGE_NAME" "$IMAGE_NAME:dev"
              docker tag "$IMAGE_NAME" "$IMAGE_NAME:dev-$IMAGE_GIT"
              docker push "$IMAGE_NAME:dev"
              docker push "$IMAGE_NAME:dev-$IMAGE_GIT"
            fi

jobs:
  setup:
    executor: buildpack
    steps:
      - checkout
      - attach_workspace: &attach_workspace
          at: ~/
      - run:
          description: Compute Dockerfile hashes
          command: |
            set -xe
            cat */Dockerfile* |openssl dgst -sha256 |awk '{ print $2 }' > "docker-elixir-omg-hash"
      - restore_cache:
          keys:
            - v1-docker-elixir-omg-{{ checksum "docker-elixir-omg-hash" }}
            - v1-docker-elixir-omg-
      - persist_to_workspace: &persist_workspace
          name: Persist workspace
          root: ~/
          paths:
            - docker
            - src

  build_builder_erlang:
    executor: buildpack
    steps:
      - setup_remote_docker
      - attach_workspace: *attach_workspace
      - docker_build:
          image: "omisegoimages/elixir-omg-builder-erlang"
          dockerfile: "builder/Dockerfile.erlang"
          export: "~/docker/omisegoimages_elixir-omg_builder_erlang.tar"
      - persist_to_workspace:
          <<: *persist_workspace
          paths:
            - docker/omisegoimages_elixir-omg_builder_erlang.tar

  build_builder_elixir:
    executor: buildpack
    steps:
      - setup_remote_docker
      - attach_workspace: *attach_workspace
      - docker_build:
          image: "omisegoimages/elixir-omg-builder-elixir"
          dockerfile: "builder/Dockerfile.elixir"
          export: "~/docker/omisegoimages_elixir-omg_builder_elixir.tar"
      - persist_to_workspace:
          <<: *persist_workspace
          paths:
            - docker/omisegoimages_elixir-omg_builder_elixir.tar

  build_builder_rocksdb:
    executor: buildpack
    steps:
      - setup_remote_docker
      - attach_workspace: *attach_workspace
      - docker_build:
          image: "omisegoimages/elixir-omg-builder-rocksdb"
          dockerfile: "builder/Dockerfile.rocksdb"
          export: "~/docker/omisegoimages_elixir-omg_builder_rocksdb.tar"
      - persist_to_workspace:
          <<: *persist_workspace
          paths:
            - docker/omisegoimages_elixir-omg_builder_rocksdb.tar

  build_builder:
    executor: buildpack
    steps:
      - setup_remote_docker
      - attach_workspace: *attach_workspace
      - docker_build:
          image: "omisegoimages/elixir-omg-builder"
          dockerfile: "builder/Dockerfile"
          export: "~/docker/omisegoimages_elixir-omg_builder.tar"
      - persist_to_workspace:
          <<: *persist_workspace
          paths:
            - docker/omisegoimages_elixir-omg_builder.tar

  build_childchain_builder:
    executor: buildpack
    steps:
      - setup_remote_docker
      - attach_workspace: *attach_workspace
      - docker_build:
          image: "omisego/childchain-builder"
          dockerfile: "builder_childchain/Dockerfile"
          export: "~/docker/childchain-builder.tar"
      - persist_to_workspace:
          <<: *persist_workspace
          paths:
            - docker/childchain-builder.tar

  build_tester_geth:
    executor: buildpack
    steps:
      - setup_remote_docker
      - attach_workspace: *attach_workspace
      - docker_build:
          image: "omisegoimages/elixir-omg-tester-geth"
          dockerfile: "tester/Dockerfile.geth"
          export: "~/docker/omisegoimages_elixir-omg_tester_geth.tar"
      - persist_to_workspace:
          <<: *persist_workspace
          paths:
            - docker/omisegoimages_elixir-omg_tester_geth.tar

  build_tester_plasma_deployer:
    executor: buildpack
    steps:
      - setup_remote_docker
      - attach_workspace: *attach_workspace
      - docker_build:
          image: "omisegoimages/elixir-omg-tester-plasma-deployer"
          dockerfile: "tester/Dockerfile.plasma_deployer"
          export: "~/docker/omisegoimages_elixir-omg_tester_plasma_deployer.tar"
          build-arg: "GITHUB_TOKEN=${GITHUB_TOKEN}"
      - persist_to_workspace:
          <<: *persist_workspace
          paths:
            - docker/omisegoimages_elixir-omg_tester_plasma_deployer.tar

  build_tester:
    executor: buildpack
    steps:
      - setup_remote_docker
      - attach_workspace: *attach_workspace
      - docker_build:
          image: "omisegoimages/elixir-omg-tester"
          dockerfile: "tester/Dockerfile"
          export: "~/docker/omisegoimages_elixir-omg_tester.tar"
      - persist_to_workspace:
          <<: *persist_workspace
          paths:
            - docker/omisegoimages_elixir-omg_tester.tar

  publish_builder:
    executor: buildpack
    steps:
      - setup_remote_docker
      - attach_workspace: *attach_workspace
      - docker_import:
          path: "~/docker"
      - docker_push:
          image: "omisegoimages/elixir-omg-builder"

  publish_childchain_builder:
    executor: buildpack
    steps:
      - setup_remote_docker
      - attach_workspace: *attach_workspace
      - docker_import:
          path: "~/docker"
      - docker_push:
          image: "omisego/childchain-builder"

  publish_tester:
    executor: buildpack
    steps:
      - setup_remote_docker
      - attach_workspace: *attach_workspace
      - docker_import:
          path: "~/docker"
      - docker_push:
          image: "omisegoimages/elixir-omg-tester"

  publish_plasma_deployer:
    executor: buildpack
    steps:
      - setup_remote_docker
      - attach_workspace: *attach_workspace
      - docker_import:
          path: "~/docker"
      - docker_push:
          image: "omisegoimages/elixir-omg-tester-plasma-deployer"

  build_deploy:
    executor: buildpack
    steps:
      - setup_remote_docker
      - attach_workspace: *attach_workspace
      - docker_build:
          image: "omisegoimages/elixir-omg-deploy"
          dockerfile: "deploy/Dockerfile"
          export: "~/docker/omisegoimages_elixir-omg_deploy.tar"
      - persist_to_workspace:
          <<: *persist_workspace
          paths:
            - docker/omisegoimages_elixir-omg_deploy.tar

  publish_deploy:
    executor: buildpack
    steps:
      - setup_remote_docker
      - attach_workspace: *attach_workspace
      - docker_import:
          path: "~/docker"
      - docker_push:
          image: "omisegoimages/elixir-omg-deploy"

  save_cache:
    executor: buildpack
    steps:
      - attach_workspace: *attach_workspace
      - save_cache:
          name: Cache builder image artifacts
          key: v1-docker-elixir-omg-{{ checksum "docker-elixir-omg-hash" }}
          paths:
            - ~/docker

  snapshot_plasma_contracts:
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - checkout
      - attach_workspace: *attach_workspace
      - run:
          name: Login so that we can pull Vault
          command: |
            echo $GCLOUD_SERVICE_KEY_VAULT | gcloud auth activate-service-account --key-file=-
            gcloud auth configure-docker --quiet
      - run: docker login -u $DOCKER_USER -p $DOCKER_PASS
      - run:
          name: Setup data dir
          working_directory: ~/project/contracts
          command: |
            sudo chmod -R 777 immutability/config/
      - snapshot:
          min_exit_period: 20
          docker_compose_command: "docker-compose up -d"
      - snapshot:
          min_exit_period: 120
          docker_compose_command: "docker-compose up -d"
      - snapshot:
          min_exit_period: 240
          docker_compose_command: "docker-compose up -d"
      - snapshot:
          min_exit_period: 20
          docker_compose_command: "docker-compose -f docker-compose.yml -f docker-compose.vault.yml up -d"
          vault: "true"
      - snapshot:
          min_exit_period: 120
          docker_compose_command: "docker-compose -f docker-compose.yml -f docker-compose.vault.yml up -d"
          vault: "true"
      - snapshot:
          min_exit_period: 240
          docker_compose_command: "docker-compose -f docker-compose.yml -f docker-compose.vault.yml up -d"
          vault: "true"
      - run:
          name: Gather all the snapshots and publish a release
          command: |
            if [ "$CIRCLE_BRANCH" = "master" ]; then
              CONTRACT_SHA=$(cat tester/CONTRACT_SHA)
              IMAGE_DATE="$(date -u +%Y%m%d)"
              TAG="plasma-contracts-snapshot-$IMAGE_DATE-${CONTRACT_SHA}"
              echo ${TAG}
              DATA=$(cat /tmp/release | jq -Rs '.')
              echo ${DATA}
              curl -H "Authorization: token ${GITHUB_TOKEN}" -X POST -d "{\"tag_name\": \"${TAG}\",\"body\": ${DATA} }" "https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/releases"
            fi

  snapshot_plasma_contracts_reorg:
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - checkout
      - attach_workspace: *attach_workspace
      - run:
          name: Login so that we can pull Vault
          command: |
            echo $GCLOUD_SERVICE_KEY_VAULT | gcloud auth activate-service-account --key-file=-
            gcloud auth configure-docker --quiet
      - run: docker login -u $DOCKER_USER -p $DOCKER_PASS
      - run:
          name: Setup data dir
          working_directory: ~/project/contracts_reorg
          command: |
            sudo chmod -R 777 immutability/config/
      - snapshot_reorg:
          min_exit_period: 120
      - run:
          name: Gather all the snapshots and publish a release
          command: |
            if [ "$CIRCLE_BRANCH" = "master" ]; then
              CONTRACT_SHA=$(cat tester/CONTRACT_SHA)
              IMAGE_DATE="$(date -u +%Y%m%d)"
              TAG="plasma-contracts-snapshot-reorg-$IMAGE_DATE-${CONTRACT_SHA}"
              echo ${TAG}
              DATA=$(cat /tmp/release | jq -Rs '.')
              echo ${DATA}
              curl -H "Authorization: token ${GITHUB_TOKEN}" -X POST -d "{\"tag_name\": \"${TAG}\",\"body\": ${DATA} }" "https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/releases"
            fi


workflows:
  version: 2
  build:
    jobs:
      - setup

      - build_builder_erlang:
          requires:
            - setup
      - build_builder_elixir:
          requires:
            - build_builder_erlang
      - build_builder_rocksdb:
          requires:
            - setup
      - build_builder:
          requires:
            - build_builder_rocksdb
            - build_builder_elixir
      - build_childchain_builder:
          requires:
            - build_builder_elixir
      - publish_builder:
          requires:
            - build_builder
      - publish_childchain_builder:
          requires:
            - build_childchain_builder

      - build_tester_geth:
          requires:
            - setup
      - build_tester_plasma_deployer:
          requires:
            - setup
      - build_tester:
          requires:
            - build_builder_rocksdb
            - build_builder_elixir
            - build_tester_geth
      - publish_tester:
          requires:
            - build_tester

      - publish_plasma_deployer:
          requires:
            - build_tester_plasma_deployer

      - snapshot_plasma_contracts:
          requires:
            - publish_plasma_deployer

      - snapshot_plasma_contracts_reorg:
          requires:
            - publish_plasma_deployer

      - build_deploy:
          requires:
            - setup
      - publish_deploy:
          requires:
            - build_deploy

      - save_cache:
          requires:
            - publish_childchain_builder
            - publish_builder
            - publish_deploy
